// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service_area

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ServiceAreaClient is the client API for ServiceArea service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceAreaClient interface {
	GetAreaInfo(ctx context.Context, in *GetAreaRequest, opts ...grpc.CallOption) (*GetAreaInfoResponse, error)
}

type serviceAreaClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceAreaClient(cc grpc.ClientConnInterface) ServiceAreaClient {
	return &serviceAreaClient{cc}
}

func (c *serviceAreaClient) GetAreaInfo(ctx context.Context, in *GetAreaRequest, opts ...grpc.CallOption) (*GetAreaInfoResponse, error) {
	out := new(GetAreaInfoResponse)
	err := c.cc.Invoke(ctx, "/service_area.ServiceArea/GetAreaInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceAreaServer is the server API for ServiceArea service.
// All implementations must embed UnimplementedServiceAreaServer
// for forward compatibility
type ServiceAreaServer interface {
	GetAreaInfo(context.Context, *GetAreaRequest) (*GetAreaInfoResponse, error)
	mustEmbedUnimplementedServiceAreaServer()
}

// UnimplementedServiceAreaServer must be embedded to have forward compatible implementations.
type UnimplementedServiceAreaServer struct {
}

func (UnimplementedServiceAreaServer) GetAreaInfo(context.Context, *GetAreaRequest) (*GetAreaInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAreaInfo not implemented")
}
func (UnimplementedServiceAreaServer) mustEmbedUnimplementedServiceAreaServer() {}

// UnsafeServiceAreaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceAreaServer will
// result in compilation errors.
type UnsafeServiceAreaServer interface {
	mustEmbedUnimplementedServiceAreaServer()
}

func RegisterServiceAreaServer(s *grpc.Server, srv ServiceAreaServer) {
	s.RegisterService(&_ServiceArea_serviceDesc, srv)
}

func _ServiceArea_GetAreaInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAreaServer).GetAreaInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service_area.ServiceArea/GetAreaInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAreaServer).GetAreaInfo(ctx, req.(*GetAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceArea_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service_area.ServiceArea",
	HandlerType: (*ServiceAreaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAreaInfo",
			Handler:    _ServiceArea_GetAreaInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/service_area.proto",
}
